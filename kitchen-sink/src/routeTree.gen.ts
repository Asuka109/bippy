/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MultiProviderTestImport } from './routes/multi-provider-test'
import { Route as MiniReactScanImport } from './routes/mini-react-scan'
import { Route as ChildrenRenderTestImport } from './routes/children-render-test'
import { Route as ButtonTestImport } from './routes/button-test'
import { Route as BigGridTestImport } from './routes/big-grid-test'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const OwnerTreeLazyImport = createFileRoute('/owner-tree')()

// Create/Update Routes

const OwnerTreeLazyRoute = OwnerTreeLazyImport.update({
  id: '/owner-tree',
  path: '/owner-tree',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/owner-tree.lazy').then((d) => d.Route))

const MultiProviderTestRoute = MultiProviderTestImport.update({
  id: '/multi-provider-test',
  path: '/multi-provider-test',
  getParentRoute: () => rootRoute,
} as any)

const MiniReactScanRoute = MiniReactScanImport.update({
  id: '/mini-react-scan',
  path: '/mini-react-scan',
  getParentRoute: () => rootRoute,
} as any)

const ChildrenRenderTestRoute = ChildrenRenderTestImport.update({
  id: '/children-render-test',
  path: '/children-render-test',
  getParentRoute: () => rootRoute,
} as any)

const ButtonTestRoute = ButtonTestImport.update({
  id: '/button-test',
  path: '/button-test',
  getParentRoute: () => rootRoute,
} as any)

const BigGridTestRoute = BigGridTestImport.update({
  id: '/big-grid-test',
  path: '/big-grid-test',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/big-grid-test': {
      id: '/big-grid-test'
      path: '/big-grid-test'
      fullPath: '/big-grid-test'
      preLoaderRoute: typeof BigGridTestImport
      parentRoute: typeof rootRoute
    }
    '/button-test': {
      id: '/button-test'
      path: '/button-test'
      fullPath: '/button-test'
      preLoaderRoute: typeof ButtonTestImport
      parentRoute: typeof rootRoute
    }
    '/children-render-test': {
      id: '/children-render-test'
      path: '/children-render-test'
      fullPath: '/children-render-test'
      preLoaderRoute: typeof ChildrenRenderTestImport
      parentRoute: typeof rootRoute
    }
    '/mini-react-scan': {
      id: '/mini-react-scan'
      path: '/mini-react-scan'
      fullPath: '/mini-react-scan'
      preLoaderRoute: typeof MiniReactScanImport
      parentRoute: typeof rootRoute
    }
    '/multi-provider-test': {
      id: '/multi-provider-test'
      path: '/multi-provider-test'
      fullPath: '/multi-provider-test'
      preLoaderRoute: typeof MultiProviderTestImport
      parentRoute: typeof rootRoute
    }
    '/owner-tree': {
      id: '/owner-tree'
      path: '/owner-tree'
      fullPath: '/owner-tree'
      preLoaderRoute: typeof OwnerTreeLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/big-grid-test': typeof BigGridTestRoute
  '/button-test': typeof ButtonTestRoute
  '/children-render-test': typeof ChildrenRenderTestRoute
  '/mini-react-scan': typeof MiniReactScanRoute
  '/multi-provider-test': typeof MultiProviderTestRoute
  '/owner-tree': typeof OwnerTreeLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/big-grid-test': typeof BigGridTestRoute
  '/button-test': typeof ButtonTestRoute
  '/children-render-test': typeof ChildrenRenderTestRoute
  '/mini-react-scan': typeof MiniReactScanRoute
  '/multi-provider-test': typeof MultiProviderTestRoute
  '/owner-tree': typeof OwnerTreeLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/big-grid-test': typeof BigGridTestRoute
  '/button-test': typeof ButtonTestRoute
  '/children-render-test': typeof ChildrenRenderTestRoute
  '/mini-react-scan': typeof MiniReactScanRoute
  '/multi-provider-test': typeof MultiProviderTestRoute
  '/owner-tree': typeof OwnerTreeLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/big-grid-test'
    | '/button-test'
    | '/children-render-test'
    | '/mini-react-scan'
    | '/multi-provider-test'
    | '/owner-tree'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/big-grid-test'
    | '/button-test'
    | '/children-render-test'
    | '/mini-react-scan'
    | '/multi-provider-test'
    | '/owner-tree'
  id:
    | '__root__'
    | '/'
    | '/big-grid-test'
    | '/button-test'
    | '/children-render-test'
    | '/mini-react-scan'
    | '/multi-provider-test'
    | '/owner-tree'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BigGridTestRoute: typeof BigGridTestRoute
  ButtonTestRoute: typeof ButtonTestRoute
  ChildrenRenderTestRoute: typeof ChildrenRenderTestRoute
  MiniReactScanRoute: typeof MiniReactScanRoute
  MultiProviderTestRoute: typeof MultiProviderTestRoute
  OwnerTreeLazyRoute: typeof OwnerTreeLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BigGridTestRoute: BigGridTestRoute,
  ButtonTestRoute: ButtonTestRoute,
  ChildrenRenderTestRoute: ChildrenRenderTestRoute,
  MiniReactScanRoute: MiniReactScanRoute,
  MultiProviderTestRoute: MultiProviderTestRoute,
  OwnerTreeLazyRoute: OwnerTreeLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/big-grid-test",
        "/button-test",
        "/children-render-test",
        "/mini-react-scan",
        "/multi-provider-test",
        "/owner-tree"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/big-grid-test": {
      "filePath": "big-grid-test.tsx"
    },
    "/button-test": {
      "filePath": "button-test.tsx"
    },
    "/children-render-test": {
      "filePath": "children-render-test.tsx"
    },
    "/mini-react-scan": {
      "filePath": "mini-react-scan.tsx"
    },
    "/multi-provider-test": {
      "filePath": "multi-provider-test.tsx"
    },
    "/owner-tree": {
      "filePath": "owner-tree.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
